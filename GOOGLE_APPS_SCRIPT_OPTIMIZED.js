// Google Apps Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç timezone ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + CACHE SYSTEM)
// ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Google Apps Script Editor

// ========== CONFIG ==========
const sheetid = "110t2LJA96E0eZRTj40kgW0_X50v7dUkt-oTR1SA13wU";
var accessToken = '7yh7P8dfolfTAe4YxovRpmFtC7gOtU3zRA/lAQZce2QAIxj3r4rDElMrFc85vv0CMNWiksyJeY/cG6WLpLmD4cKxWYTK1TDzn2IjBqofgdm4G8oTtOn/VOjWJQ+KNg3H7glWWoL6rLGDv70xlveeewdB04t89/1O/w1cDnyilFU';
const ssFilter = "sentnotify";
const ssData = "data";
const ssBilling = "billing"; // Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏•

// ========== CACHE CONFIG ==========
const CACHE_DURATION = 60 * 5; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const CACHE_KEY_CUSTOMERS = 'all_customers_data';
const CACHE_KEY_BILLING = 'all_billing_data';

// ========== CACHE FUNCTIONS ==========
/**
 * ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function clearCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove(CACHE_KEY_CUSTOMERS);
    cache.remove(CACHE_KEY_BILLING);
    console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á cache ‡πÑ‡∏î‡πâ:', error);
  }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function clearCustomerCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove(CACHE_KEY_CUSTOMERS);
    console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Customer Cache ‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á customer cache ‡πÑ‡∏î‡πâ:', error);
  }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•
 */
function clearBillingCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove(CACHE_KEY_BILLING);
    console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Billing Cache ‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á billing cache ‡πÑ‡∏î‡πâ:', error);
  }
}

// ========== LINE NOTIFY FUNCTIONS ==========

function sendAlert() {
  const filterSheet = SpreadsheetApp.openById(sheetid).getSheetByName(ssFilter);
  const dataSheet = SpreadsheetApp.openById(sheetid).getSheetByName(ssData);
  const filterLastRow = filterSheet.getLastRow();

  if (filterLastRow < 2) {
    Logger.log("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
    return;
  }

  const filterValues = filterSheet.getRange("B2:L" + filterLastRow).getValues();

  filterValues.forEach((row) => {
    const licensePlate = row[1]; // B - ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
    const lastPaidDate = row[5]; // F
    const nextDueDate = row[9];  // J
    const userId = row[7];       // H
    const status = row[10];      // K

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï data (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L)
    const notifyStatus = getNotifyStatus(dataSheet, licensePlate);
    if (notifyStatus === "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß") {
      Logger.log(`‡∏Ç‡πâ‡∏≤‡∏° ${licensePlate} (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß)`);
      return;
    }

    if (userId && status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î") {
      const message = `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå/‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
        `‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${licensePlate}\n` +
        `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${formatDate(nextDueDate)}\n\n` +
        `‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`;

      sendLineMessage(accessToken, userId, message);
      updateNotifyStatus(dataSheet, licensePlate, "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß");
      Logger.log(`‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${licensePlate} ‚Üí ${userId}`);
    }
  });
}

function getNotifyStatus(sheet, licensePlate) {
  const data = sheet.getRange("A2:L" + sheet.getLastRow()).getValues(); // ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L
  for (let i = 0; i < data.length; i++) {
    if (data[i][1] === licensePlate) { // B - ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
      return data[i][11]; // L = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    }
  }
  return "";
}

function updateNotifyStatus(sheet, licensePlate, newStatus) {
  const data = sheet.getRange("A2:L" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][1] === licensePlate) {
      sheet.getRange(i + 2, 12).setValue(newStatus); // L = ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 12
      break;
    }
  }
}

function formatDate(cell) {
  if (Object.prototype.toString.call(cell) === '[object Date]' && !isNaN(cell)) {
    return Utilities.formatDate(cell, "Asia/Bangkok", "dd/MM/yyyy");
  }
  return cell;
}

function sendLineMessage(token, recipientId, text) {
  const payload = JSON.stringify({
    to: recipientId,
    messages: [{ type: 'text', text }]
  });

  const options = {
    method: 'post',
    contentType: 'application/json',
    headers: {
      Authorization: 'Bearer ' + token
    },
    payload
  };

  UrlFetchApp.fetch('https://api.line.me/v2/bot/message/push', options);
}

function testInsert() {
  const sheet = SpreadsheetApp.openById(sheetid).getSheetByName(ssData);
  sheet.appendRow(['', 'TEST987', 'Brand', 'Name', '0800000000', '2025-12-31', 'Note here', 'TEST_USERID_123456', '', '', '']);
}

// ========== DATA FUNCTIONS ==========

/**
 * ‡∏î‡∏∂‡∏á‡∏ä‡∏µ‡∏ï data ‡πÉ‡∏ô Google Sheets
 */
function getDataSheet() {
  const ss = SpreadsheetApp.openById(sheetid);
  const sheet = ss.getSheetByName(ssData);
  if (!sheet) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "data"');
  return sheet;
}

/**
 * normalize ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:
 * - NFC normalization
 * - ‡∏•‡∏ö whitespace ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
 * - uppercase
 */
function normalizePlate(str) {
  return String(str || '')
    .normalize('NFC')
    .replace(/\s+/g, '')
    .toUpperCase();
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å DD/MM/YYYY ‡πÄ‡∏õ‡πá‡∏ô Date object (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç timezone)
 */
function parseDate(dateStr) {
  if (!dateStr) return null;
  
  try {
    console.log('Parsing date:', dateStr);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
    if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateStr)) {
      const [day, month, year] = dateStr.split('/');
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô timezone ‡πÑ‡∏ó‡∏¢
      const dateObj = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      console.log('Parsed DD/MM/YYYY:', dateObj);
      return dateObj;
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
    else if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
      const [year, month, day] = dateStr.split('-');
      const dateObj = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      console.log('Parsed YYYY-MM-DD:', dateObj);
      return dateObj;
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    else if (dateStr instanceof Date) {
      console.log('Already Date object:', dateStr);
      return dateStr;
    }
    // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Date
    else {
      const dateObj = new Date(dateStr);
      console.log('Parsed as Date:', dateObj);
      return dateObj;
    }
  } catch (error) {
    console.error('Error parsing date:', dateStr, error);
    return null;
  }
}

// ========== API ENDPOINTS ==========

/**
 * GET: check=1&plate=‚Ä¶  => ‡∏Ñ‡∏∑‡∏ô { exists, data? }
 * GET: getAll=1  => ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Cache)
 * GET: getBills=1  => ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Cache)
 */
function doGet(e) {
  try {
    // ‚ö° ‡∏Å‡∏£‡∏ì‡∏µ getBills=1 ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Cache)
    if (e.parameter.getBills === '1') {
      const forceRefresh = e.parameter.refresh === '1';
      const billingSheet = SpreadsheetApp.openById(sheetid).getSheetByName(ssBilling);
      if (!billingSheet) {
        return ContentService.createTextOutput(JSON.stringify({
          result: 'error',
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet "billing"'
        })).setMimeType(ContentService.MimeType.JSON);
      }
      return getAllBillsWithCache(billingSheet, forceRefresh);
    }

    const sheet = getDataSheet();

    // ‚ö° ‡∏Å‡∏£‡∏ì‡∏µ getAll=1 ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Cache)
    if (e.parameter.getAll === '1') {
      const forceRefresh = e.parameter.refresh === '1';
      return getAllCustomersWithCache(sheet, forceRefresh);
    }

    // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ plate
    const rawPlate = e.parameter.plate || '';
    const plateParam = normalizePlate(rawPlate);
    const isCheck = e.parameter.check === '1';

    if (!isCheck || !plateParam) {
      return ContentService
        .createTextOutput(JSON.stringify({ error: true, message: 'Invalid request' }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    const rows = sheet.getDataRange().getValues();
    let foundIdx = -1;

    for (let i = 1; i < rows.length; i++) {
      const cell = normalizePlate(rows[i][1]);
      if (cell === plateParam) {
        foundIdx = i;
        break;
      }
    }

    if (foundIdx >= 1) {
      const r = rows[foundIdx];
      const data = {
        licensePlate: String(r[1] || ''),
        brand: String(r[2] || ''),
        customerName: String(r[3] || ''),
        phone: String(r[4] || ''),
        registerDate: r[5]
          ? Utilities.formatDate(new Date(r[5]), 'Asia/Bangkok', 'dd/MM/yyyy')
          : '',
        note: String(r[6] || ''),
        userId: String(r[7] || ''),
        day: Number(r[8]) || 365,
      };

      return ContentService
        .createTextOutput(JSON.stringify({ exists: true, data }))
        .setMimeType(ContentService.MimeType.JSON);
    } else {
      return ContentService
        .createTextOutput(JSON.stringify({ exists: false }))
        .setMimeType(ContentService.MimeType.JSON);
    }
  } catch (err) {
    return ContentService
      .createTextOutput(JSON.stringify({ error: true, message: err.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‚ö° ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Cache
 */
function getAllCustomersWithCache(sheet, forceRefresh = false) {
  try {
    const cache = CacheService.getScriptCache();
    
    // ‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà force refresh)
    if (!forceRefresh) {
      const cached = cache.get(CACHE_KEY_CUSTOMERS);
      if (cached) {
        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Cache');
        return ContentService.createTextOutput(cached)
          .setMimeType(ContentService.MimeType.JSON);
      }
    }
    
    console.log('üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Sheet (Cache miss ‡∏´‡∏£‡∏∑‡∏≠ force refresh)');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet
    const rows = sheet.getDataRange().getValues();
    const headers = rows[0];
    
    const data = rows.slice(1).map(row => {
      let obj = {};
      headers.forEach((h, i) => {
        // ‡πÅ‡∏õ‡∏•‡∏á Date object ‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
        if (row[i] instanceof Date) {
          obj[h] = Utilities.formatDate(row[i], 'Asia/Bangkok', 'dd/MM/yyyy');
        } else {
          obj[h] = row[i];
        }
      });
      return obj;
    });

    const result = JSON.stringify({
      result: 'success',
      data: data,
      cached: false,
      timestamp: new Date().toISOString(),
      count: data.length
    });
    
    // ‚ö° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
    try {
      cache.put(CACHE_KEY_CUSTOMERS, result, CACHE_DURATION);
      console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏•‡∏á Cache ‡πÅ‡∏•‡πâ‡∏ß (', data.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)');
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å customer cache ‡πÑ‡∏î‡πâ:', cacheError);
    }

    return ContentService
      .createTextOutput(result)
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Error in getAllCustomersWithCache:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‚ö° ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Cache
 */
function getAllBillsWithCache(sheet, forceRefresh = false) {
  try {
    const cache = CacheService.getScriptCache();
    
    // ‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà force refresh)
    if (!forceRefresh) {
      const cached = cache.get(CACHE_KEY_BILLING);
      if (cached) {
        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏à‡∏≤‡∏Å Cache');
        return ContentService.createTextOutput(cached)
          .setMimeType(ContentService.MimeType.JSON);
      }
    }
    
    console.log('üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏à‡∏≤‡∏Å Sheet (Cache miss ‡∏´‡∏£‡∏∑‡∏≠ force refresh)');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet
    const rows = sheet.getDataRange().getValues();
    const headers = rows[0];
    
    const data = rows.slice(1).map(row => {
      let obj = {};
      headers.forEach((h, i) => {
        // ‡πÅ‡∏õ‡∏•‡∏á Date object ‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
        if (row[i] instanceof Date) {
          obj[h] = Utilities.formatDate(row[i], 'Asia/Bangkok', 'dd/MM/yyyy');
        } else {
          obj[h] = row[i];
        }
      });
      return obj;
    });

    const result = JSON.stringify({
      result: 'success',
      data: data,
      cached: false,
      timestamp: new Date().toISOString(),
      count: data.length
    });
    
    // ‚ö° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
    try {
      cache.put(CACHE_KEY_BILLING, result, CACHE_DURATION);
      console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏•‡∏á Cache ‡πÅ‡∏•‡πâ‡∏ß (', data.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)');
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å billing cache ‡πÑ‡∏î‡πâ:', cacheError);
    }

    return ContentService
      .createTextOutput(result)
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Error in getAllBillsWithCache:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * POST: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á JSON ‡πÅ‡∏•‡∏∞ FormData
 */
function doPost(e) {
  try {
    console.log('=== DEBUG INFO ===');
    console.log('e.parameter:', e.parameter);
    console.log('e.postData:', e.postData);
    console.log('e.postData.type:', e.postData ? e.postData.type : 'undefined');
    console.log('e.postData.contents:', e.postData ? e.postData.contents : 'undefined');
    
    let data;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠ FormData
    if (e.postData && e.postData.type === 'application/json' && e.postData.contents) {
      console.log('Processing as JSON');
      data = JSON.parse(e.postData.contents);
    } else if (e.parameter) {
      console.log('Processing as FormData');
      data = e.parameter;
    } else {
      console.log('No data received');
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        message: 'No data received'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    console.log('Final data:', data);
    const action = data.action;
    
    if (!action) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        message: 'No action specified'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    if (action === 'addCustomer') {
      return addCustomer(data);
    } else if (action === 'updateCustomer') {
      return updateCustomer(data);
    } else if (action === 'deleteCustomer') {
      return deleteCustomer(data);
    } else {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        message: 'Invalid action: ' + action
      })).setMimeType(ContentService.MimeType.JSON);
    }
  } catch (error) {
    console.error('Error in doPost:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: 'Server error: ' + error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
 * A: timestamp, B: ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ, C: ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô, D: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, E: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠,
 * F: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î, G: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏, H: userId, I: day (365)
 * J: ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î, K: ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
 */
function addCustomer(data) {
  try {
    console.log('Adding customer:', data);
    const sheet = getDataSheet();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B)
    const existingData = sheet.getDataRange().getValues();
    for (let i = 1; i < existingData.length; i++) {
      if (normalizePlate(existingData[i][1]) === normalizePlate(data.licensePlate)) {
        return ContentService.createTextOutput(JSON.stringify({
          result: 'error',
          message: '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        })).setMimeType(ContentService.MimeType.JSON);
      }
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const dateObj = parseDate(data.registerDate);
    console.log('Parsed date for add:', dateObj);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
    // A=timestamp, B=licensePlate, C=brand, D=customerName, E=phone, 
    // F=registerDate, G=note, H=userId, I=day
    const newRow = [
      new Date(), // A: timestamp
      data.licensePlate || '', // B: ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
      data.brand || '', // C: ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô
      data.customerName || '', // D: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      data.phone || '', // E: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
      dateObj || '', // F: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Date object)
      data.note || '', // G: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      '', // H: userId (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ)
      365 // I: day (default 365)
    ];
    
    console.log('Adding row:', newRow);
    const lastRow = sheet.getLastRow() + 1;
    sheet.getRange(lastRow, 1, 1, 9).setValues([newRow]);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå J (‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î) ‡πÅ‡∏•‡∏∞ K (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
    sheet.getRange(lastRow, 10).setFormula(
      `=IF(F${lastRow}<>"", DATEVALUE(F${lastRow})+I${lastRow},"")`
    );
    sheet.getRange(lastRow, 11).setFormula(
      `=IF(J${lastRow}<>"",LET(gap,J${lastRow}-TODAY(),
         IF(gap<0,"‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î",IF(gap=0,"‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
         IF(gap<=90,"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î","‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß")))),"")`
    );
    
    // ‚ö° ‡∏•‡πâ‡∏≤‡∏á customer cache
    clearCustomerCache();
    
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success',
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Error in addCustomer:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function updateCustomer(data) {
  try {
    console.log('=== UPDATE CUSTOMER ===');
    console.log('Updating customer:', data);
    console.log('originalLicensePlate:', data.originalLicensePlate);
    console.log('licensePlate:', data.licensePlate);
    
    const sheet = getDataSheet();
    const allData = sheet.getDataRange().getValues();
    
    console.log('Total rows:', allData.length);
    console.log('Looking for originalLicensePlate:', data.originalLicensePlate);
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏° (normalize ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á) - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
    let targetRow = -1;
    for (let i = 1; i < allData.length; i++) {
      const sheetPlate = normalizePlate(allData[i][1]);
      const searchPlate = normalizePlate(data.originalLicensePlate);
      
      console.log(`Row ${i}: comparing "${sheetPlate}" with "${searchPlate}"`);
      
      if (sheetPlate === searchPlate) {
        targetRow = i + 1; // +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Google Sheets ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
        console.log('Found matching row:', targetRow);
        break;
      }
    }
    
    console.log('Final targetRow:', targetRow);
    
    if (targetRow === -1) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)
    if (normalizePlate(data.licensePlate) !== normalizePlate(data.originalLicensePlate)) {
      for (let i = 1; i < allData.length; i++) {
        if (normalizePlate(allData[i][1]) === normalizePlate(data.licensePlate) && (i + 1) !== targetRow) {
          return ContentService.createTextOutput(JSON.stringify({
            result: 'error',
            message: '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
          })).setMimeType(ContentService.MimeType.JSON);
        }
      }
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const dateObj = parseDate(data.registerDate);
    console.log('Parsed date for update:', dateObj);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
    // A=timestamp (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°), B=licensePlate, C=brand, D=customerName, E=phone, 
    // F=registerDate, G=note, H=userId (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°), I=day (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    const updateRow = [
      allData[targetRow-1][0], // A: ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡πÄ‡∏î‡∏¥‡∏°
      data.licensePlate || '', // B: ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
      data.brand || '', // C: ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô
      data.customerName || '', // D: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      data.phone || '', // E: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
      dateObj || allData[targetRow-1][5], // F: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      data.note || '', // G: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      allData[targetRow-1][7] || '', // H: ‡πÄ‡∏Å‡πá‡∏ö userId ‡πÄ‡∏î‡∏¥‡∏°
      allData[targetRow-1][8] || 365 // I: ‡πÄ‡∏Å‡πá‡∏ö day ‡πÄ‡∏î‡∏¥‡∏°
    ];
    
    console.log('Updating row', targetRow, 'with:', updateRow);
    sheet.getRange(targetRow, 1, 1, 9).setValues([updateRow]);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå J ‡πÅ‡∏•‡∏∞ K
    sheet.getRange(targetRow, 10).setFormula(
      `=IF(F${targetRow}<>"", DATEVALUE(F${targetRow})+I${targetRow},"")`
    );
    sheet.getRange(targetRow, 11).setFormula(
      `=IF(J${targetRow}<>"",LET(gap,J${targetRow}-TODAY(),
         IF(gap<0,"‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î",IF(gap=0,"‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
         IF(gap<=90,"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î","‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß")))),"")`
    );
    
    // ‚ö° ‡∏•‡πâ‡∏≤‡∏á customer cache
    clearCustomerCache();
    
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success',
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Error in updateCustomer:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function deleteCustomer(data) {
  try {
    console.log('=== DELETE CUSTOMER ===');
    console.log('Deleting customer:', data);
    console.log('licensePlate:', data.licensePlate);
    
    const sheet = getDataSheet();
    const allData = sheet.getDataRange().getValues();
    
    console.log('Total rows:', allData.length);
    console.log('Looking for licensePlate:', data.licensePlate);
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (normalize ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á) - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
    let targetRow = -1;
    for (let i = 1; i < allData.length; i++) {
      const sheetPlate = normalizePlate(allData[i][1]);
      const searchPlate = normalizePlate(data.licensePlate);
      
      console.log(`Row ${i}: comparing "${sheetPlate}" with "${searchPlate}"`);
      
      if (sheetPlate === searchPlate) {
        targetRow = i + 1; // +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Google Sheets ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
        console.log('Found matching row:', targetRow);
        break;
      }
    }
    
    console.log('Final targetRow:', targetRow);
    
    if (targetRow === -1) {
      return ContentService.createTextOutput(JSON.stringify({
        result: 'error',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß
    console.log('Deleting row:', targetRow);
    sheet.deleteRow(targetRow);
    
    // ‚ö° ‡∏•‡πâ‡∏≤‡∏á customer cache
    clearCustomerCache();
    
    return ContentService.createTextOutput(JSON.stringify({
      result: 'success',
      message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Error in deleteCustomer:', error);
    return ContentService.createTextOutput(JSON.stringify({
      result: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// ========== TESTING FUNCTIONS ==========

/**
 * ‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Cache
 */
function testCache() {
  console.log('=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Cache ===');
  
  // ‡∏•‡πâ‡∏≤‡∏á cache
  clearCache();
  console.log('1. ‡∏•‡πâ‡∏≤‡∏á cache ‡πÅ‡∏•‡πâ‡∏ß');
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1 (‡πÑ‡∏°‡πà‡∏°‡∏µ cache)
  console.log('2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1 (‡πÑ‡∏°‡πà‡∏°‡∏µ cache)');
  const sheet = getDataSheet();
  const start1 = new Date().getTime();
  getAllCustomersWithCache(sheet, true);
  const end1 = new Date().getTime();
  console.log('   ‡πÄ‡∏ß‡∏•‡∏≤:', end1 - start1, 'ms');
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2 (‡∏°‡∏µ cache)
  console.log('3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2 (‡∏°‡∏µ cache)');
  const start2 = new Date().getTime();
  getAllCustomersWithCache(sheet, false);
  const end2 = new Date().getTime();
  console.log('   ‡πÄ‡∏ß‡∏•‡∏≤:', end2 - start2, 'ms');
  
  if ((end2 - start2) > 0) {
    console.log('4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô:', Math.round((end1 - start1) / (end2 - start2)), '‡πÄ‡∏ó‡πà‡∏≤');
  } else {
    console.log('4. Cache ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! (‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏ô‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)');
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Notify
 */
function testLineNotify() {
  console.log('=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Notify ===');
  sendAlert();
  console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}
