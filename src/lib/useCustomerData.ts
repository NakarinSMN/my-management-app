// src/lib/useCustomerData.ts
// Custom Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° Cache

import useSWR from 'swr';
import { useEffect, useState } from 'react';

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Google Sheets API ‡πÄ‡∏õ‡πá‡∏ô MongoDB API
const MONGODB_CUSTOMER_API_URL = '/api/customers';

interface RawCustomerDataItem {
  // MongoDB fields
  licensePlate?: string;
  brand?: string;
  customerName?: string;
  phone?: string;
  registerDate?: string;
  status?: string;
  note?: string;
  userId?: string;
  day?: number;
  // Google Sheets fields (‡πÄ‡∏î‡∏¥‡∏°)
  '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ'?: string;
  '‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ / ‡∏£‡∏∏‡πà‡∏ô'?: string;
  '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'?: string;
  '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'?: string | number;
  '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'?: string;
  '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'?: string;
  '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'?: string;
  '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏'?: string;
}

export interface CustomerData {
  licensePlate: string;
  brand?: string;
  customerName: string;
  phone: string;
  registerDate: string;
  status: string;
  note?: string;
  userId?: string;
  day?: number;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetcher ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ cache
const fetcher = async (url: string) => {
  console.log('üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB API...');
  const response = await fetch(url);
  const data = await response.json();
  console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  return data;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ
function calculateStatus(registerDate: string): string {
  if (!registerDate) return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
  
  try {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Date object
    let date: Date;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
    if (/^\d{2}\/\d{2}\/\d{4}$/.test(registerDate)) {
      const [day, month, year] = registerDate.split('/');
      date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
    else if (/^\d{4}-\d{2}-\d{2}$/.test(registerDate)) {
      date = new Date(registerDate);
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO format
    else if (registerDate.includes('T')) {
      date = new Date(registerDate);
    }
    else {
      return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (1 ‡∏õ‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞)
    const expiryDate = new Date(date);
    expiryDate.setFullYear(expiryDate.getFullYear() + 1);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì gap (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
    const today = new Date();
    const gap = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£
    if (gap < 0) {
      return '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
    } else if (gap === 0) {
      return '‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
    } else if (gap <= 90) {
      return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
    } else {
      return '‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß';
    }
  } catch (error) {
    console.error('Error calculating status:', error);
    return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô CustomerData
export function formatCustomerData(item: RawCustomerDataItem): CustomerData {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏´‡∏£‡∏∑‡∏≠ Google Sheets
  const isMongoDBData = item.licensePlate !== undefined;
  
  if (isMongoDBData) {
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
    const dtField: string = item.registerDate || '';
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    let registerDate = '';
    if (dtField) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO format (YYYY-MM-DDTHH:mm:ss)
      if (dtField.includes('T')) {
        registerDate = dtField.split('T')[0];
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      else if (/^\d{2}\/\d{2}\/\d{4}$/.test(dtField)) {
        registerDate = dtField;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
      else if (/^\d{4}-\d{2}-\d{2}$/.test(dtField)) {
        registerDate = dtField;
      }
      // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
      else {
        registerDate = dtField;
      }
    }
    
    const rawPhone: string = (item.phone || '').toString();
    const phone: string = rawPhone.startsWith('0') || rawPhone.length === 0 ? rawPhone : `0${rawPhone}`;
    
    return {
      licensePlate: item.licensePlate || '',
      brand: item.brand || '',
      customerName: item.customerName || '',
      phone,
      registerDate,
      status: calculateStatus(registerDate), // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      note: item.note || '',
      userId: item.userId || '',
      day: item.day || 365,
    };
  } else {
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets (‡πÄ‡∏î‡∏¥‡∏°)
    const dtField: string = item['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'] || '';
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    let registerDate = '';
    if (dtField) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO format (YYYY-MM-DDTHH:mm:ss)
      if (dtField.includes('T')) {
        registerDate = dtField.split('T')[0];
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      else if (/^\d{2}\/\d{2}\/\d{4}$/.test(dtField)) {
        registerDate = dtField;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
      else if (/^\d{4}-\d{2}-\d{2}$/.test(dtField)) {
        registerDate = dtField;
      }
      // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
      else {
        registerDate = dtField;
      }
    }
    
    const rawPhone: string = (item['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'] || '').toString();
    const phone: string = rawPhone.startsWith('0') || rawPhone.length === 0 ? rawPhone : `0${rawPhone}`;
    
    return {
      licensePlate: item['‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ'] || '',
      brand: item['‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ / ‡∏£‡∏∏‡πà‡∏ô'] || '',
      customerName: item['‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'] || '',
      phone,
      registerDate,
      status: calculateStatus(registerDate), // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      note: item['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏'] || '',
    };
  }
}

// Custom Hook ‡∏´‡∏•‡∏±‡∏Å
export function useCustomerData() {
  const [formattedData, setFormattedData] = useState<CustomerData[]>([]);
  
  const { data: swrData, error: swrError, mutate, isLoading } = useSWR(
    MONGODB_CUSTOMER_API_URL,
    fetcher,
    {
      revalidateOnFocus: true,
      revalidateOnReconnect: true,
      dedupingInterval: 0, // ‡πÑ‡∏°‡πà‡∏°‡∏µ deduping
      revalidateIfStale: true,
      revalidateOnMount: true,
      refreshInterval: 0, // ‡πÑ‡∏°‡πà auto refresh
    }
  );

  useEffect(() => {
    if (swrData && swrData.data) {
      console.log('üîç [useCustomerData] Raw data received:', swrData.data);
      const formatted: CustomerData[] = (swrData.data || []).map((item: RawCustomerDataItem) => 
        formatCustomerData(item)
      );
      
      console.log('üîç [useCustomerData] Formatted data:', formatted);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î (reverse order)
      const reversedData = formatted.reverse();
      setFormattedData(reversedData);
    }
  }, [swrData]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const refreshData = async () => {
    await mutate();
  };

  return {
    data: formattedData,
    rawData: swrData,
    error: swrError,
    isLoading,
    mutate,
    refreshData,
  };
}

// Export API URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô forms
export { MONGODB_CUSTOMER_API_URL };


