// src/app/api/billing/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getDatabase } from '@/lib/mongodb';

// GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
export async function GET() {
  const startTime = Date.now();
  
  try {
    console.log('üîç [Billing API] Starting MongoDB connection...');
    console.log('üîç [Billing API] Environment check:', {
      hasMongoUri: !!process.env.MONGODB_URI,
      hasMongoDb: !!process.env.MONGODB_DATABASE,
      nodeEnv: process.env.NODE_ENV
    });
    
    const db = await getDatabase();
    console.log('‚úÖ [Billing API] MongoDB connected successfully');
    
    const billing = db.collection('billing');
    console.log('üîç [Billing API] Fetching billing from collection...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const collections = await db.listCollections({ name: 'billing' }).toArray();
    console.log('üîç [Billing API] Collections found:', collections.length);
    
    if (collections.length === 0) {
      console.warn('‚ö†Ô∏è [Billing API] Collection "billing" not found, creating empty result');
      return NextResponse.json({ 
        success: true, 
        data: [],
        count: 0,
        message: 'Collection "billing" not found. Please create the collection in MongoDB Atlas.'
      });
    }
    
    // ‡πÉ‡∏ä‡πâ projection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
    const data = await billing.find({}, {
      projection: {
        _id: 0, // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á _id
        billNumber: 1,
        customerName: 1,
        service: 1,
        category: 1,
        price: 1,
        date: 1,
        phone: 1,
        status: 1,
        items: 1
      }
    }).toArray();
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ [Billing API] Successfully fetched ${data.length} billing records in ${duration}ms`);
    
    return NextResponse.json({ 
      success: true, 
      data: data,
      count: data.length,
      duration: duration
    });
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error('‚ùå [Billing API] Error fetching billing:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      duration: duration
    });
    
    // Return more detailed error information
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    const isConnectionError = errorMessage.includes('connection') || 
                             errorMessage.includes('SSL') || 
                             errorMessage.includes('TLS') ||
                             errorMessage.includes('timeout') ||
                             errorMessage.includes('ECONNREFUSED');
    
    return NextResponse.json(
      { 
        success: false, 
        error: isConnectionError 
          ? 'MongoDB connection failed. Please check your connection string and network access.'
          : 'Failed to fetch billing data',
        details: errorMessage,
        duration: duration
      },
      { status: 500 }
    );
  }
}

// POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const db = await getDatabase();
    const billing = db.collection('billing');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingBill = await billing.findOne({ 
      billNumber: body.billNumber 
    });
    
    if (existingBill) {
      return NextResponse.json(
        { success: false, error: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 400 }
      );
    }
    
    const newBill = {
      ...body,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await billing.insertOne(newBill);
    
    return NextResponse.json({ 
      success: true, 
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      id: result.insertedId 
    });
  } catch (error) {
    console.error('Error adding bill:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to add bill' },
      { status: 500 }
    );
  }
}

// PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const db = await getDatabase();
    const billing = db.collection('billing');
    
    const { originalBillNumber, ...updateData } = body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•)
    if (updateData.billNumber !== originalBillNumber) {
      const existingBill = await billing.findOne({ 
        billNumber: updateData.billNumber 
      });
      
      if (existingBill) {
        return NextResponse.json(
          { success: false, error: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
          { status: 400 }
        );
      }
    }
    
    const result = await billing.updateOne(
      { billNumber: originalBillNumber },
      { 
        $set: {
          ...updateData,
          updatedAt: new Date()
        }
      }
    );
    
    if (result.matchedCount === 0) {
      return NextResponse.json(
        { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ 
      success: true, 
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });
  } catch (error) {
    console.error('Error updating bill:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update bill' },
      { status: 500 }
    );
  }
}

// DELETE: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const billNumber = searchParams.get('billNumber');
    
    if (!billNumber) {
      return NextResponse.json(
        { success: false, error: 'Bill number is required' },
        { status: 400 }
      );
    }
    
    const db = await getDatabase();
    const billing = db.collection('billing');
    
    const result = await billing.deleteOne({ billNumber });
    
    if (result.deletedCount === 0) {
      return NextResponse.json(
        { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ 
      success: true, 
      message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });
  } catch (error) {
    console.error('Error deleting bill:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete bill' },
      { status: 500 }
    );
  }
}
