// src/app/api/debug-mongodb/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getDatabase } from '@/lib/mongodb';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { test } = body;

    console.log('üîç [Debug MongoDB] Starting test:', test);

    switch (test) {
      case 'environment':
        const mongoUri = process.env.MONGODB_URI;
        const mongoDb = process.env.MONGODB_DATABASE;
        
        if (!mongoUri || !mongoDb) {
          return NextResponse.json({
            success: false,
            error: '‚ùå Environment Variables ‡πÑ‡∏°‡πà‡∏û‡∏ö',
            details: `MONGODB_URI: ${mongoUri ? '‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö'}\nMONGODB_DATABASE: ${mongoDb ? '‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö'}`
          });
        }
        
        return NextResponse.json({
          success: true,
          message: '‚úÖ Environment Variables ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
          details: `MONGODB_URI: ${mongoUri.substring(0, 50)}...\nMONGODB_DATABASE: ${mongoDb}`
        });

      case 'uri_format':
        const uri = process.env.MONGODB_URI;
        if (!uri) {
          return NextResponse.json({
            success: false,
            error: '‚ùå MONGODB_URI ‡πÑ‡∏°‡πà‡∏û‡∏ö',
            details: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MONGODB_URI ‡πÉ‡∏ô environment variables'
          });
        }
        
        const isValidFormat = uri.startsWith('mongodb+srv://') && uri.includes('@') && uri.includes('.mongodb.net');
        if (!isValidFormat) {
          return NextResponse.json({
            success: false,
            error: '‚ùå MongoDB URI Format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            details: 'URI ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ mongodb+srv:// ‡πÅ‡∏•‡∏∞‡∏°‡∏µ @ ‡πÅ‡∏•‡∏∞ .mongodb.net'
          });
        }
        
        return NextResponse.json({
          success: true,
          message: '‚úÖ MongoDB URI Format ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: `URI: ${uri.substring(0, 50)}...`
        });

      case 'network':
        try {
          const db = await getDatabase();
          await db.admin().ping();
          
          return NextResponse.json({
            success: true,
            message: '‚úÖ Network connectivity ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB Atlas ‡πÑ‡∏î‡πâ',
            details: {
              database: db.databaseName,
              collections: await db.listCollections().toArray()
            }
          });
        } catch (error) {
          return NextResponse.json({
            success: false,
            error: '‚ùå Network connectivity ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            details: error instanceof Error ? error.message : 'Unknown error'
          });
        }

      case 'auth':
        try {
          const db = await getDatabase();
          const collections = await db.listCollections().toArray();
          
          return NextResponse.json({
            success: true,
            message: '‚úÖ Authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏î‡πâ',
            details: {
              database: db.databaseName,
              collectionsCount: collections.length
            }
          });
        } catch (error) {
          return NextResponse.json({
            success: false,
            error: '‚ùå Authentication ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            details: error instanceof Error ? error.message : 'Unknown error'
          });
        }

      case 'database':
        try {
          const db = await getDatabase();
          const collections = await db.listCollections().toArray();
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collections ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          const customersExists = collections.some(c => c.name === 'customers');
          const billingExists = collections.some(c => c.name === 'billing');
          
          return NextResponse.json({
            success: true,
            message: '‚úÖ Database access ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á database ‡πÑ‡∏î‡πâ',
            details: {
              database: db.databaseName,
              collections: collections.map(c => c.name),
              customersExists,
              billingExists
            }
          });
        } catch (error) {
          return NextResponse.json({
            success: false,
            error: '‚ùå Database access ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            details: error instanceof Error ? error.message : 'Unknown error'
          });
        }

      default:
        return NextResponse.json({
          success: false,
          error: '‚ùå Test ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å',
          details: 'Unknown test type'
        });
    }
  } catch (error) {
    console.error('‚ùå [Debug MongoDB] Error:', error);
    return NextResponse.json({
      success: false,
      error: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}